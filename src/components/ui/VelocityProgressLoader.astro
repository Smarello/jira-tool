---
/**
 * Velocity progress loader with detailed sprint progression
 * Following Clean Code: Single responsibility, express intent
 */

export interface Props {
  totalSprints?: number;
  currentSprint?: number;
  sprintName?: string;
  phase?: 'fetching' | 'calculating' | 'validating' | 'complete';
  message?: string;
}

const { 
  totalSprints = 0, 
  currentSprint = 0, 
  sprintName = '', 
  phase = 'fetching',
  message = 'Loading velocity data...' 
} = Astro.props;

const progressPercentage = totalSprints > 0 ? Math.round((currentSprint / totalSprints) * 100) : 0;

const phaseMessages = {
  fetching: 'Fetching sprint data',
  calculating: 'Calculating velocity',
  validating: 'Validating issues',
  complete: 'Finalizing results'
};

const phaseIcons = {
  fetching: 'ðŸ“Š',
  calculating: 'ðŸ”„',
  validating: 'âœ…',
  complete: 'ðŸŽ‰'
};
---

<div class="flex flex-col items-center justify-center p-6 bg-white rounded-lg shadow-lg max-w-md mx-auto">
  <!-- Main spinner -->
  <div class="animate-spin rounded-full border-4 border-gray-200 border-t-blue-600 w-12 h-12 mb-4"></div>
  
  <!-- Phase indicator -->
  <div class="flex items-center mb-3">
    <span class="text-2xl mr-2">{phaseIcons[phase]}</span>
    <span class="text-lg font-medium text-gray-800">{phaseMessages[phase]}</span>
  </div>
  
  <!-- Sprint progress -->
  {totalSprints > 0 && currentSprint > 0 && (
    <div class="w-full mb-4">
      <div class="flex justify-between items-center mb-2">
        <span class="text-sm font-medium text-gray-700">Sprint Progress</span>
        <span class="text-sm text-gray-600">{currentSprint} / {totalSprints}</span>
      </div>
      
      <!-- Progress bar -->
      <div class="w-full bg-gray-200 rounded-full h-3 mb-2">
        <div 
          class="h-3 bg-gradient-to-r from-blue-500 to-blue-600 rounded-full transition-all duration-300 ease-out"
          style={`width: ${progressPercentage}%`}
        ></div>
      </div>
      
      <!-- Progress percentage -->
      <div class="text-center">
        <span class="text-2xl font-bold text-blue-600">{progressPercentage}%</span>
        <span class="text-sm text-gray-600 ml-1">complete</span>
      </div>
    </div>
  )}
  
  <!-- Current sprint being processed -->
  {sprintName && (
    <div class="text-center mb-3">
      <p class="text-sm text-gray-600">Currently processing:</p>
      <p class="text-base font-semibold text-gray-800 truncate max-w-xs" title={sprintName}>
        {sprintName}
      </p>
    </div>
  )}
  
  <!-- Status message -->
  <p class="text-sm text-gray-600 text-center">{message}</p>
  
  <!-- Estimated time (optional) -->
  {totalSprints > 0 && currentSprint > 0 && (
    <div class="mt-3 text-xs text-gray-500 text-center">
      <p>Processing sprints... Please wait</p>
    </div>
  )}
</div>

<style>
  /* Smooth animations for progress updates */
  .transition-all {
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }
  
  /* Pulsing animation for current sprint name */
  .animate-pulse-subtle {
    animation: pulse-subtle 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  
  @keyframes pulse-subtle {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.8;
    }
  }
</style> 