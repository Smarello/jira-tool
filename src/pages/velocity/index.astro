---
/**
 * Velocity Dashboard Page
 * Following Clean Code: Single responsibility, clear data flow
 */

import Layout from '../../components/ui/Layout.astro';
import BoardSelector from '../../components/velocity/BoardSelector.astro';
import ScrumAnalytics from '../../components/analytics/ScrumAnalytics.astro';
import KanbanAnalytics from '../../components/analytics/KanbanAnalytics.astro';
import TabSelector from '../../components/ui/TabSelector.astro';

import VelocityProgressLoader from '../../components/ui/VelocityProgressLoader.astro';
import SprintIssuesModal from '../../components/velocity/SprintIssuesModal.astro';

// Fetch initial data server-side
let boards = [];
let error = null;

try {
  const response = await fetch(`${Astro.url.origin}/api/velocity/boards`);
  const data = await response.json();
  
  if (response.ok) {
    boards = data.boards || [];
  } else {
    error = data.error || 'Failed to load boards';
  }
} catch (e) {
  error = 'Network error loading boards';
}

// Select first board by default if available
const defaultBoardId = boards.length > 0 ? boards[0].id : null;
---

<Layout title="Velocity Dashboard - Jira Tool Analytics">
  <div class="velocity-page">
    <!-- Page Header -->
    <div class="page-header mb-8">
      <h1 class="text-3xl font-bold text-gray-900 mb-2">
        Velocity Dashboard
      </h1>
      <p class="text-gray-600">
        Track sprint velocity and team performance across boards
      </p>
    </div>
    
    <!-- Error State -->
    {error && (
      <div class="error-banner bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
        <div class="flex">
          <div class="text-red-400">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
            </svg>
          </div>
          <div class="ml-3">
            <p class="text-sm text-red-800">
              {error}
            </p>
          </div>
        </div>
      </div>
    )}
    
    <!-- Main Content -->
    {!error && (
      <div class="velocity-dashboard">
        <!-- Board Selection -->
        <div class="board-selection-section mb-8">
          <BoardSelector 
            boards={boards}
            selectedBoardId={defaultBoardId}
            disabled={boards.length === 0}
          />
        </div>
        
        <!-- Analytics Content - Conditional based on board type -->
        <div class="analytics-content-section">
          
          <!-- NEW: Scrum boards with tab system -->
          <div id="scrum-tab-analytics" class="scrum-tab-analytics">
            <TabSelector 
              tabs={[
                { id: 'velocity', label: 'Velocity Analytics' },
                { id: 'cycle-time', label: 'Cycle Time Analytics' }
              ]}
              activeTab="velocity"
              class="mb-6"
            />
            
            <!-- Velocity Tab Content -->
            <div 
              id="velocity-tab-content" 
              class="tab-content"
              role="tabpanel"
              aria-labelledby="velocity-tab"
            >
              <ScrumAnalytics boardId={defaultBoardId} loading={defaultBoardId ? true : false} />
            </div>
            
            <!-- Cycle Time Tab Content: REUSE KanbanAnalytics -->
            <div 
              id="cycle-time-tab-content" 
              class="tab-content hidden"
              role="tabpanel"
              aria-labelledby="cycle-time-tab"
            >
              <KanbanAnalytics boardId={defaultBoardId} loading={false} />
            </div>
          </div>


        </div>
        
        <!-- Loading overlay for dynamic updates -->
        <div id="loading-overlay" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
          <div id="progress-loader-container">
            <VelocityProgressLoader 
              boardId={defaultBoardId || 'unknown'}
              stage="quick"
              progress={0}
              message="Initializing velocity analysis..."
              allowCancel={true}
            />
          </div>
        </div>
      </div>
    )}
  </div>
  
  <!-- Sprint Issues Modal -->
  <SprintIssuesModal sprint={null} isOpen={false} />
</Layout>

<script>
  // Client-side interactivity for dynamic board switching
  // Following Clean Code: Express intent, single responsibility per function
  
  let currentBoardId: string | null = null;
  let activeTab: 'velocity' | 'cycle-time' = 'velocity';
  let isCycleTimeLoaded = false;





  // Functions removed - updateProgressLoader and createProgressLoaderHTML were unused

  /**
   * Handles tab switching between velocity and cycle-time
   * Following Clean Code: Single responsibility, clear state management
   */
  function switchTab(tabId: 'velocity' | 'cycle-time') {
    if (tabId === activeTab) return;
    
    console.log(`[VelocityPage] Switching from ${activeTab} to ${tabId}`);
    
    // Hide current tab content
    const currentContent = document.getElementById(`${activeTab}-tab-content`);
    if (currentContent) currentContent.classList.add('hidden');
    
    // Show new tab content
    const newContent = document.getElementById(`${tabId}-tab-content`);
    if (newContent) newContent.classList.remove('hidden');
    
    // Update active tab state
    activeTab = tabId;
    
    // Lazy load cycle time data when first opened
    if (tabId === 'cycle-time' && !isCycleTimeLoaded && currentBoardId) {
      loadCycleTimeForCurrentBoard();
    }
  }

  /**
   * Loads cycle time data for current board (lazy loading)
   * Following Clean Code: Express intent, async operation
   */
  async function loadCycleTimeForCurrentBoard() {
    if (!currentBoardId || isCycleTimeLoaded) return;
    
    console.log(`[VelocityPage] Lazy loading cycle time data for board ${currentBoardId}`);
    
    try {
      // Use existing KanbanAnalytics functionality
      if ((window as any).kanbanAnalytics?.loadKanbanAnalytics) {
        await (window as any).kanbanAnalytics.loadKanbanAnalytics(currentBoardId);
        isCycleTimeLoaded = true;
        console.log(`[VelocityPage] Cycle time data loaded successfully for board ${currentBoardId}`);
      }
    } catch (error) {
      console.error('[VelocityPage] Failed to load cycle time data:', error);
      // Keep isCycleTimeLoaded as false to allow retry
    }
  }

  

  
  /**
   * Shows loading overlay
   */
  function showLoading() {
    const overlay = document.getElementById('loading-overlay');
    if (overlay) {
      overlay.classList.remove('hidden');
    }
  }
  
  /**
   * Hides loading overlay
   */
  function hideLoading() {
    const overlay = document.getElementById('loading-overlay');
    if (overlay) {
      overlay.classList.add('hidden');
    }
  }
  

  /**
   * Handles board change event with tab switching based on board type
   * Following Clean Code: Event handling with clear flow
   */
  async function handleBoardChange(event: CustomEvent) {
    const { boardId, boardType } = event.detail;

    if (boardId === currentBoardId) return;

    currentBoardId = boardId;

    // Reset cycle time loaded flag for new board
    isCycleTimeLoaded = false;

    // Determine default tab based on board type
    const defaultTab: 'velocity' | 'cycle-time' = boardType === 'kanban' ? 'cycle-time' : 'velocity';
    
    // Switch to appropriate tab
    switchTab(defaultTab);

    showLoading();

    try {
      if (defaultTab === 'cycle-time') {
        // Load Kanban analytics for cycle-time tab
        if ((window as any).kanbanAnalytics?.updateFiltersState) {
          (window as any).kanbanAnalytics.updateFiltersState(boardId, false);
        }
        
        if ((window as any).kanbanAnalytics?.loadKanbanAnalytics) {
          await (window as any).kanbanAnalytics.loadKanbanAnalytics(boardId);
          isCycleTimeLoaded = true;
        }
      } else {
        // Load Scrum analytics for velocity tab
        if ((window as any).kanbanAnalytics?.updateFiltersState) {
          (window as any).kanbanAnalytics.updateFiltersState(null, false);
        }
        
        if ((window as any).scrumAnalytics?.loadScrumAnalytics) {
          await (window as any).scrumAnalytics.loadScrumAnalytics(boardId);
        }
      }
      
    } catch (error) {
      console.error('Failed to load analytics data:', error);

      if (defaultTab === 'cycle-time') {
        console.error('Kanban analytics loading failed');
      } else {
        console.error('Scrum analytics loading failed');
      }
    } finally {
      hideLoading();
    }
  }
  

  
  /**
   * Initializes the page with correct tab and analytics loading
   * Following Clean Code: Setup function with clear intent
   */
  async function initializePage() {
    // Load initial data if board is pre-selected
    const boardSelect = document.getElementById('board-select') as HTMLSelectElement;
    if (boardSelect && boardSelect.value) {
      currentBoardId = boardSelect.value;

      // Get board type from the selected option
      const selectedOption = boardSelect.options[boardSelect.selectedIndex];
      const boardTypeMatch = selectedOption?.text.match(/\((\w+)\)$/);
      const boardType = boardTypeMatch ? boardTypeMatch[1] : 'scrum';

      // Determine default tab based on board type
      const defaultTab: 'velocity' | 'cycle-time' = boardType === 'kanban' ? 'cycle-time' : 'velocity';
      
      // Switch to appropriate tab
      switchTab(defaultTab);

      try {
        if (defaultTab === 'cycle-time') {
          // Load Kanban analytics for cycle-time tab
          if ((window as any).kanbanAnalytics?.loadKanbanAnalytics) {
            await (window as any).kanbanAnalytics.loadKanbanAnalytics(currentBoardId);
            isCycleTimeLoaded = true;
          }
        } else {
          // Load Scrum analytics for velocity tab
          if ((window as any).scrumAnalytics?.loadScrumAnalytics) {
            await (window as any).scrumAnalytics.loadScrumAnalytics(currentBoardId);
          }
        }
      } catch (error) {
        console.error('Failed to load initial analytics data:', error);
      } finally {
        hideLoading();
      }
    }
  }
  
  /**
   * Opens the sprint issues modal
   * Following Clean Code: Clear intent, parameter validation
   */
  function openSprintModal(sprintId: string, _sprintName: string) {
    if (!sprintId) {
      console.error('Sprint ID is required');
      return;
    }
    
    // Find the sprint data from the current velocity data
    const velocityData = (window as any).currentVelocityData;
    if (velocityData && velocityData.closedSprints) {
      const selectedSprint = velocityData.closedSprints.find((sv: any) => sv.sprint.id === sprintId);
      
      if (selectedSprint) {
        // Store selected sprint data
        (window as any).currentSprintData = selectedSprint;
        
        // Show the modal
        (window as any).showModal();
        
        // Load sprint issues
        (window as any).loadSprintIssues(sprintId);
      } else {
        console.error('Sprint not found:', sprintId);
      }
    }
  }
  
  // Make functions available globally
  (window as any).openSprintModal = openSprintModal;
  
  // Event listeners
  document.addEventListener('boardChanged', handleBoardChange as unknown as EventListener);
  document.addEventListener('tabChanged', (e) => {
    const { tabId } = (e as CustomEvent).detail;
    switchTab(tabId);
  });
  document.addEventListener('DOMContentLoaded', initializePage);
</script>

<style>
  .velocity-page {
    @apply max-w-7xl mx-auto;
  }
  
  .velocity-dashboard {
    @apply relative;
  }
  
  /* Tab System Styles */
  .scrum-tab-analytics {
    @apply w-full;
  }
  
  .tab-content {
    @apply transition-opacity duration-200;
  }
  
  .tab-content.hidden {
    @apply opacity-0;
  }
  
  .analytics-view {
    @apply w-full;
  }
</style>
